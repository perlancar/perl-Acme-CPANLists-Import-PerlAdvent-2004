<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2004 Advent Calendar: Text::Unidecode</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2004 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 12th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Text::Unidecode</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../11th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../13th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>For all its merits, sometimes we just don't want to deal with Unicode.
We're often in a situation where by we want to have a plain old ASCII
version of what we're looking at.  L&#233;on gets annoyed when he
has to use "Leon" instead, but everyone knows what it means.</p>
<p>What <b>Text::Unidecode</b> does is convert a random string into just
ASCII characters.  It's not perfect - it has to fudge a lot of stuff,
but to be fair there's no one way to this properly, since everyone
disagrees on what maps to what.  The fact is that it <u>works</u>
however, and that's what counts.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Text::Unidecode">[Read the documentation for Text::Unidecode on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>There's not really much that can be explained about this module
that a simple example won't cover:</p>
<pre>  use utf8;
  use Text::Unidecode;
  print unidecode("L&#233;on &amp; m&#248;&#248;se\n");</pre>

<p>Prints out</p>
<pre>  Leon and Moose</pre>

<p>Note the <code>&#233;</code> has been downgraded to an <code>e</code> and likewise
the <code>&#248;</code> have been downgraded to <code>o</code>s.  It can cope with
quite complex stuff...for example, throwing it a couple of
Chinese characters works quite well:</p>
<pre>  use utf8;
  use Text::Unidecode;
  print unidecode("\x{5317}\x{4EB0}\n");</pre>

<p>prints</p>
<pre>  Bei Jing</pre>

<p>It replaces <code>\x{5317}</code> with <code>Bei</code> and <code>\x{4EB0} with <code>Jing</code>.  Of
course, this is a rough approximation - the pronunciation of many
characters changes quite a lot depending on dialect - or so I've been
told.</code></p>
<p>It's worth remembering that <b>Text::Unidecode</b>'s not perfect however.
For example the <code>&#8482;</code> trademark sign doesn't get converted to
<code>TM</code>.</p>
<pre>  use utf8;
  use Text::Unidecode;
  print unidecode("Log&#8482;");</pre>

<p>Sadly just prints</p>
<pre>  Log</pre>

<p>The <code>&#8482;</code> has been converted to a space.  Still, it's better
than nothing - and a lot better than having to worry about it all
ourselves.  At least we know for sure that no matter what comes out
the other end of the <code>unidecode</code> routine that it's going to be in
ASCII</p>
<h2>Using this in practice</h2>
<p>My good friend was talking to me the other day about rearranging his
mp3 collection.  He wanted to put each of his mp3s in a different
directory depending on who the artist was, and inside those
directories he wanted a directory for each album, and finally within
those directories he wanted the mp3 files, named after the track name.</p>
<p>For example, he's looking to create a directory structure that looks
somewhat like this:</p>
<pre>  mp3s
  |
  +-- Green_Day
  |   |
  |   +-- Dookie
  |   |   |
  |   |   +-- Burnout
  |   |   +-- Having_A_Blast.mp3
  |   |   +-- Chump
  |   |   +-- Long_View.mp3
  |   |   
  |   +-- Insomniac
  |       |
  |       +-- Armatage_Shanks.mp3
  |       +-- Brat.mp3
  |       +-- Stuck_With_Me.mp2
  |
  +-- Miles_Davis
      |
      +-- Bags_Groove
          |
          +--Bags_Grove.mp3
          +--A_Gal_in_Calico.mp3
          +--Minor_March.mp3</pre>

<p>We can find all the existing files quite easily using
<b>File::Find::Rule</b>.</p>
<pre>  use File::Find::Rule;
  my @files = File::Find::Rule-&gt;file
                              -&gt;name("*.mp3)
                              -&gt;in("Music");</pre>

<p>Each MP3 file has a MP3 tag which contains the information we need (the
artist, the title and the album).  We can access this kind of
information with <b>MP3::Info</b>.</p>
<pre>  foreach my $filename (@files)
  {
    # find out where these things are meant to be
    use MP3::Info (:all);</pre>

<pre>    # get the values;
    use_mp3_utf8(1);
    my $tag = get_mp3tag($filename);</pre>

<pre>    # decode the utf8 bytes into chars
    use Encode qw(decode);
    foreach (values %{ $tag })
     { $_ = decode("utf8", $_) }</pre>

<pre>    # extract what we're interested in
    my $title  = $tag-&gt;{TITLE}  || "Unknown";
    my $artist = $tag-&gt;{ARTIST} || "Unknown";
    my $album  = $tag-&gt;{ALBUM}  || "Unknown";</pre>

<pre>    # work out where they're going
    use File::Spec::Functions; 
    use File::Path;
    use File::Copy; </pre>

<pre>    my $dir = catdir("mp3s", $artist, $album);
    mkpath([$dir]) unless -d $dir;
 
    # copy the mp3 there
    my $dest = catfile($dir, "$title.mp3");
    copy($filename, $dest);
  }</pre>

<p>Of course, we're completely ignoring one <i>huge</i> problem - that the
files might contain strange Unicode characters (or illegal ASCII ones
fro that matter).  What we need to do is alter the script to munge the
values as they come in</p>
<pre>  my $title  = munge($tag-&gt;{TITLE}  || "Unknown");
  my $artist = munge($tag-&gt;{ARTIST} || "Unknown");
  my $album  = munge($tag-&gt;{ALBUM}  || "Unknown");</pre>

<p>And then write our munging routine:</p>
<pre>  sub munge
  {
    local $_ = shift;</pre>

<pre>    # make ASCII
    $_ = unidecode($_);</pre>

<pre>    # convert some symbols into letters
    s/@/at/g;
    s/&amp;/and/g;
    s/*/star/g;</pre>

<pre>    # convert all nastiness to spaces
    s/[^a-zA-Z0-9,.!\[\]'"|-_()]/ /g;</pre>

<pre>    # make all whitespace single spaces
    s/\s+/ /g;</pre>

<pre>    # remove starting or trailing whitespace
    s/^\s+//;
    s/\s+$//;</pre>

<pre>    # make all spaces underscores
    tr/ /_/g;</pre>

<pre>    return $_;
  }</pre>

<p>Huzzah!  We're done.  This, of course, assumes that our MP3s have
valid ID3 tags.  That, however, is a discussion for another day.</p>
</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/?perldoc?MP3::Info">MP3::Info</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:58 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>