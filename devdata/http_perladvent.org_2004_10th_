<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2004 Advent Calendar: Data::UUID</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2004 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 10th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Data::UUID</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../9th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../11th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>We often need to create a unique value to index something by - a
unique filename, primary key in a database, user id, or url.  The
situations we need these in are varied; We might want to write to
different temp files so our scripts don't interfere with each other.
We might want to hand tickets out to users and make sure our tickets
are can't be confused with one another no matter where the user got
that ticket from.  We might want to store rows in a table en mass
without having to rely on an auto-incrementing key.</p>
<p>I've seen many schemes to create unique numbers.  The simplest
solution of starting with one and working your way up to two, then
three, then four, and so on is effective but can be unreliable if you
don't have one process doing the allocation (as you'll end up with a
<i>race condition</i> where while program's counting then allocating a
number, another program is doing the same and they both get the same
number.)  Sometimes it's impossible to have a central program to do
the allocation (like with normally offline systems half way round the
world) - and sometimes it's just too much hassle (who wants to write a
service just to serve webpages?)</p>
<p><b>Data::UUID</b> will give you a globally unique identifier without
needing a central server.  It'll give you a thirty six character
string based on the time it's called - measured very, very accurately,
and something that it can determine that is unique to your computer
(like the mac address in your network card.)  And it'll guarantee that
at no other time will that string anywhere in the world be issued
again.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Data::UUID">[Read the documentation for Data::UUID on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>Creating and using <b>Data::UUID</b> strings is simple.</p>
<pre>   use Data::UUID;
   my $uf = Data::UUID-&gt;new();  # creates a factory;
   print $uf-&gt;create_str(), "\n" for 1..10;</pre>

<p>This (on and only on my laptop and only at this time and no other
time) prints:</p>
<pre>  DA4BBCAA-47AF-11D9-B274-8E5F89426015
  DA4C28A2-47AF-11D9-B274-8E5F89426015
  DA4C5836-47AF-11D9-B274-8E5F89426015
  DA4C8B8A-47AF-11D9-B274-8E5F89426015
  DA4CB628-47AF-11D9-B274-8E5F89426015
  DA4CDE32-47AF-11D9-B274-8E5F89426015
  DA4D3972-47AF-11D9-B274-8E5F89426015
  DA4D810C-47AF-11D9-B274-8E5F89426015
  DA4DB096-47AF-11D9-B274-8E5F89426015
  DA4DD990-47AF-11D9-B274-8E5F89426015</pre>

<p>You'll note that quite a lot of the string is the same for each
instance.  That's because for the most part a large part of the data
hasn't changed.  Most of the time is still the same (it's just the
ticks and seconds that are changing) and the seed that's unique to the
machine doesn't change.  If I run it again about an hour later we see
that the <code>47AF</code> in the second column has changed into a <code>47BA</code> as
a little time has passed, but the rest stays the same.</p>
<pre>  C604815E-47BA-11D9-B274-8E5F89426015
  C604F2C4-47BA-11D9-B274-8E5F89426015
  C6052460-47BA-11D9-B274-8E5F89426015
  C60550F2-47BA-11D9-B274-8E5F89426015
  C605776C-47BA-11D9-B274-8E5F89426015
  C605A8D6-47BA-11D9-B274-8E5F89426015
  C605D3B0-47BA-11D9-B274-8E5F89426015
  C606006A-47BA-11D9-B274-8E5F89426015
  C6062748-47BA-11D9-B274-8E5F89426015
  C6064DE0-47BA-11D9-B274-8E5F89426015</pre>

<p>If we run the same code on a separate computer quickly afterwards
we notice that the start of the string is the same (apart from
it's progressed on a slight time in the time it took us to change
windows) but the end of the string is radically different.</p>
<pre>  CBEC90C0-47BA-11D9-9C9F-AE87831498F6
  CBECAEA2-47BA-11D9-9C9F-AE87831498F6
  CBECB8B6-47BA-11D9-9C9F-AE87831498F6
  CBECC0CC-47BA-11D9-9C9F-AE87831498F6
  CBECC810-47BA-11D9-9C9F-AE87831498F6
  CBECD044-47BA-11D9-9C9F-AE87831498F6
  CBECD756-47BA-11D9-9C9F-AE87831498F6
  CBECDE72-47BA-11D9-9C9F-AE87831498F6
  CBECE58E-47BA-11D9-9C9F-AE87831498F6
  CBECECA0-47BA-11D9-9C9F-AE87831498F6</pre>

<h2>An example in use:</h2>
<p>Imagine we have a CGI script that creates a table of data from some
constantly changing source.  In addition to displaying this data on
the web we want to offer this data as an Excel file for download.  The
thing we need to remember is that this data keeps changing - so the
link at the bottom of the page can't be a link to a separate CGI that
goes and fetches the data source again, it has to be a link to a excel
spreadsheet we create when we create the webpage.</p>
<p>In order to allow many people to use the website at the same time we
need a unique filename for each excel document to prevent new users
overwriting the excel sheets that were previously created.  And this
is where <b>Data::UUID</b> comes in.</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  # load the modules we need
  use HTML::Entities;
  use Data::UUID;
  use Spreadsheet::WriteExcel;</pre>

<pre>  # get the data for now.  This data is constantly changing
  # so the results will be different each time it's called.
  use Fake::Datasource;
  my @tables = Fake::Datasource-&gt;tables();</pre>

<pre>  # create a unique filename
  my $filename = Data::UUID-&gt;new-&gt;create_str . ".xls";</pre>

<p>We now need to create the HTML.  We loop though the array of
tables, and the array of rows contained within and through
each value.  At the end we print a link to the Excel file
we're going to create.</p>
<pre>  print "&lt;html&gt;&lt;body&gt;";</pre>

<pre>  # each table...
  foreach my $table (@tables)  
  {
    print '&lt;table border="1"&gt;';</pre>

<pre>    # ...has many rows which contain columns
    foreach my $row (@{ $table })
    {
      print "&lt;tr&gt;";
      foreach my $col (@{ $row })
       { print "&lt;td&gt;".encode_entities($col)."&lt;/td&gt;" }
      print "&lt;/tr&gt;";
    }
    print "&lt;/table&gt;";
  }</pre>

<pre>  print qq{&lt;a href="/files/$filename"&gt;Download as Excel&lt;/a&gt;};
  print "&lt;/body&gt;&lt;/html&gt;";</pre>

<p>Now all that's left to do is do the same thing to create the
Excel file:</p>
<pre>  # create a new excel file
  my $workbook = Spreadsheet::WriteExcel-&gt;new("files/$filename");</pre>

<pre>  # for each table add a sheet...
  foreach my $table (@tables)
  {
    my $sheet = $workbook-&gt;add_worksheet();</pre>

<pre>    # ...and write each row in that table to the sheet
    my $row_index = 0;
    foreach my $row (@{ $table })
     { $sheet-&gt;write_row($row_index++, 0, $row); }
  }</pre>

<p>And we're done.</p>
</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01.txt">The Nework UUID and GUID draft</a></li>
<li><a href="http://search.cpan.org/perldoc?Tie::DataUUID">Tie::DataUUID</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:58 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>